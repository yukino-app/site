{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":""},{"location":"#how-do-i-use-this-wiki","title":"How do I use this wiki?","text":"<p>All the categories are visible on the top navbar. All the topics are visible on the left sidebar (in the left drawer on mobile). All the page content headings are visible on the right sidebar (in the left drawer on mobile).</p> <p>You can use the search bar to navigate around easily. Feel free to ask on our Discord server if it's nowhere to be found.</p>"},{"location":"#links","title":"Links","text":"<ul> <li>Discord</li> <li>GitHub</li> </ul>"},{"location":"developers/contribution/","title":"Contribution","text":"<p>Yukino Org follows certain guidelines to maintain code integrity and uniformity. It is required to follow these guidelines in order for you to contribute.</p>"},{"location":"developers/contribution/#before-hand","title":"Before-hand","text":"<ul> <li>I appreciate any contributions to any of the repository and every single feedback. And don't feel bad if your issue or pull request was closed. \ud83d\ude42</li> <li>Always check if it the right repository before opening an issue or a pull request.</li> <li>Check if there is a similar issue or a pull request before committing.</li> <li>Refer similar or other issues or pull requests if it's your first time.</li> </ul>"},{"location":"developers/contribution/#guidelines","title":"Guidelines","text":"<ul> <li>Always follow the same conventions used in the project. (Example: Using <code>snake_case</code> when necessary, organizing files according to their use)</li> <li>Always follow Conventional Commits.</li> <li>Always document the changes you have made.</li> <li>Always follow same versioning of the corresponding project. (Example: SemVer)</li> <li>An issue or a pull request must be related to only one topic. Do not make a pull request containing multiple feature or bug fixes.</li> <li>Always ask for reviews before asking to merge a pull request.</li> <li>Always try to use the pre-defined templates for issues and pull requests. Make sure to fill it completely. Invalid issues or pull requests will be closed.</li> <li>Keep it as professional as possible.</li> </ul> <p>Warning</p> <p>Opening issues in wrong repository will result in the issue being marked as invalid or will be moved to the corresponding repository.</p>"},{"location":"fubuki/","title":"Overview","text":"<p>The language syntax is a mix of Go and JavaScript. It is also highly dynamic with only basic features. Fubuki script files takes an extension of <code>.fbs</code>. The program can be compiled using Fubuki Compiler and can be run on Fubuki VM.</p> <p>Info</p> <ul> <li>Optional things are mentioned within brackets (<code>[]</code>). Escaped brackets (<code>\\[\\]</code>) says that they are part of the syntax itself.</li> </ul>"},{"location":"fubuki/#comments","title":"Comments","text":"<p>Words in a line after <code>#</code> are comments. Multi-line comments are not supported.</p> <pre><code># This is a comment.\n</code></pre>"},{"location":"fubuki/#keywords","title":"Keywords","text":"<pre><code>true\nfalse\nnull\nif\nelse\nwhile\nfun\nreturn\nbreak\ncontinue\nobj\ntry\ncatch\nthrow\nimport\nas\nlist\nmap\nwhen\nmatch\n</code></pre>"},{"location":"fubuki/#identifiers","title":"Identifiers","text":"<p>Identifiers are made up of alphabets (<code>A-Z</code>, <code>a-z</code>) and underscore (<code>_</code>). Numbers (<code>0-9</code>) can also be used but are not allowed at the start of an identifier. Keywords cannot be used as identifiers.</p> <p>Fubuki does not have a standard naming convention but camel-case is preferred.</p> <pre><code>helloWorld\nHelloWorld\n_helloWorld\nHELLO_WORLD\nhello_world\nhello123\n</code></pre>"},{"location":"fubuki/#expressions","title":"Expressions","text":"<p>Expression is a piece of code that is evaluated to a value. Literals, operations using operators, identifiers come under expressions.</p> <pre><code>helloWorld\n1 + 2\n\"Hello World!\"\n</code></pre>"},{"location":"fubuki/data-types/","title":"Data Types","text":"<p>Fubuki supports literals to represent values. All the data types exception <code>null</code> is an object. These literals are considered as expressions.</p>"},{"location":"fubuki/data-types/#null","title":"Null","text":"<p>Represents a <code>null</code> value. Also can be called as <code>void</code> or nothing.</p> Syntax<pre><code>null\n</code></pre>"},{"location":"fubuki/data-types/#number","title":"Number","text":"<p>Represents a double-precision floating point value. Supports exponents (<code>XeY</code>) and hexadecimal (<code>0xAAAAAAAA</code>) values. <code>NaN</code> is used to denote a invalid number. Infinity, negative infinity and <code>NaN</code> can be created using native number helpers.</p> Syntax (RegExp)<pre><code>-?\\d+(\\.\\d+)?\n-?\\d+(\\.\\d+)?e(\\+|-)?\\d+\n-?0[Xx][A-Fa-f]+\n</code></pre> Example<pre><code>0\n-140\n-9.2\n100\n250.67\n10e2\n10e-4\n0xfff\n</code></pre> Property Signature Description <code>sign</code> <code>() =&gt; Number</code> Returns the <code>-1</code> (less than zero), <code>0</code> (zero) or <code>1</code> (greater than zero). <code>isFinite</code> <code>() =&gt; Boolean</code> Is the number finite? <code>isInfinite</code> <code>() =&gt; Boolean</code> Is the number infinite? <code>isNaN</code> <code>() =&gt; Boolean</code> Is the number <code>NaN</code>? <code>isNegative</code> <code>() =&gt; Boolean</code> Is the number negative? <code>abs</code> <code>() =&gt; Number</code> Returns the number without sign. <code>ceil</code> <code>() =&gt; Number</code> Returns the number rounded towards positive infinity. <code>round</code> <code>() =&gt; Number</code> Returns the number rounded towards negative infinity. <code>truncate</code> <code>() =&gt; Number</code> Returns the number discarding fractional digits. <code>precisionString</code> <code>(digits: Number) =&gt; String</code> Returns the number string with specified precision."},{"location":"fubuki/data-types/#string","title":"String","text":"<p>Represents a string value. Strings can be prefixed with <code>r</code> to parse them as they are. Strings are always multi-line.</p> Syntax (RegExp)<pre><code>'[\\S\\s]*'\n\"[\\S\\s]*\"\nr'[\\S\\s]*'\nr\"[\\S\\s]*\"\n</code></pre> Example<pre><code>'Hello'\n\"Hello\"\nr'This is a raw string'\nr\"This is a raw string\"\n'Supports escape sequences like \\t \\n'\n\"but also unicodes like \\u0041 and \\x41\"\n\n'Easy\nand\npeasy'\n</code></pre> Property Signature Description <code>isEmpty</code> <code>() =&gt; Boolean</code> Is string empty? <code>isNotEmpty</code> <code>() =&gt; Boolean</code> Is string not empty? <code>length</code> <code>() =&gt; Number</code> Length of the string. <code>compareTo</code> <code>(other: String) =&gt; Number</code> Compare to another string. Returns <code>0</code> if equal. <code>contains</code> <code>(other: String) =&gt; Boolean</code> Check if <code>other</code> is present in the string. <code>startsWith</code> <code>(other: String) =&gt; Boolean</code> Check if the string is prefixed with <code>other</code>. <code>endsWith</code> <code>(other: String) =&gt; Boolean</code> Check if the string is suffixed with <code>other</code>. <code>indexOf</code> <code>(substring: String) =&gt; Number</code> Position of <code>substring</code> in the string. Returns <code>-1</code> if not present. <code>substring</code> <code>(start: Number, end: Number) =&gt; String</code> Returns a substring between <code>start</code> and <code>end</code>. <code>replaceFirst</code> <code>(pattern: String, with: String) =&gt; String</code> Replaces first <code>substring</code> with <code>with</code>. <code>replaceAll</code> <code>(pattern: String, with: String) =&gt; String</code> Replaces all <code>substring</code> with <code>with</code>. <code>replaceFirstMapped</code> <code>(pattern: String, mapper: (String) =&gt; String) =&gt; String</code> Replaces first <code>substring</code> with value returned by <code>with</code>. <code>replaceAllMapped</code> <code>(pattern: String, mapper: (String) =&gt; String) =&gt; String</code> Replaces all <code>substring</code> with value returned by <code>with</code>. <code>trim</code> <code>() =&gt; String</code> Removes all whitespaces at the ends. <code>trimLeft</code> <code>() =&gt; String</code> Removes all whitespaces at the start. <code>trimRight</code> <code>() =&gt; String</code> Removes all whitespaces at the end. <code>padLeft</code> <code>(length: Number, with: String) =&gt; String</code> Pads using <code>with</code> at the start. <code>padRight</code> <code>(length: Number, with: String) =&gt; String</code> Pads using <code>with</code> at the end. <code>split</code> <code>(splitter: String) =&gt; List&lt;String&gt;</code> Splits the string at <code>splitter</code>s. <code>codeUnitAt</code> <code>(index: Number) =&gt; String</code> Returns code-unit at <code>index</code>. <code>toCodeUnits</code> <code>() =&gt; List&lt;Number&gt;</code> Returns code-units of the string. <code>toLowerCase</code> <code>() =&gt; String</code> Returns the string in lowercase. <code>toUpperCase</code> <code>() =&gt; String</code> Returns the string in uppercase."},{"location":"fubuki/data-types/#boolean","title":"Boolean","text":"<p>Represents truthiness using <code>true</code> or <code>false</code>.</p> Syntax<pre><code>true\nfalse\n</code></pre> <p>Info</p> <p>Trailing commas are allowed in function parameters, function call, object key-value pairs and list values. For example, <code>[1, 2, 3,]</code> is perfectly valid and same as <code>[1, 2, 3]</code>.</p>"},{"location":"fubuki/data-types/#function","title":"Function","text":"<p>Represents a callable object. Functions are prefixed with right arrow operator (<code>-&gt;</code>). They are anonymous and cannot have a named unlike other programming languages. They are invoked using call operator. They can take in parameters and may return values.</p> Syntax<pre><code>-&gt; [param1, param2, ..., paramN] {\n    statements\n}\n\n-&gt; [param1, param2, ..., paramN] : expr\n</code></pre> Example<pre><code>-&gt; { return 1; }\n-&gt; a, b { return a + b; }\n\n-&gt; a, b : a + b\n-&gt; x : x\n</code></pre>"},{"location":"fubuki/data-types/#object","title":"Object","text":"<p>Represents a pair of keys and values. Objects are not created from classes since classes do not even exist. The keys are parsed as identifiers and values are parsed as expressions. Any keys using surrounding brackets (<code>[]</code>) are parsed as expressions. They properties can be accessed using the get and set operators.</p> Syntax<pre><code>{\n    [property: expr,]\n    ...\n    [\\[expr\\]: expr,]\n    ...\n}\n</code></pre> Example<pre><code>{}\n\n{\n    hello1: \"world1\",\n    [\"hello2\"]: \"world2\",\n    [1]: \"world3\",\n}\n</code></pre>"},{"location":"fubuki/data-types/#list","title":"List","text":"<p>Represents a list of values.</p> Syntax<pre><code>\\[[expr1, expr2, ..., exprN]\\]\n</code></pre> Example<pre><code>[]\n[1, 2, 3]\n</code></pre> Property Signature Description <code>push</code> <code>(value: Any) =&gt; Null</code> Adds <code>value</code> to the list. <code>pushAll</code> <code>(values: List&lt;Any&gt;) =&gt; Null</code> Adds all values of <code>values</code> to the list. <code>pop</code> <code>() =&gt; Null</code> Removes the last element. <code>clear</code> <code>() =&gt; Null</code> Removes all the elements. <code>length</code> <code>() =&gt; Number</code> Returns length of the list. <code>isEmpty</code> <code>() =&gt; Boolean</code> Is the list empty? <code>isNotEmpty</code> <code>() =&gt; Boolean</code> Is the list not empty? <code>clone</code> <code>() =&gt; List&lt;Any&gt;</code> Returns clone of the list. <code>reversed</code> <code>() =&gt; List&lt;Any&gt;</code> Returns reversed clone of the list. <code>contains</code> <code>(element: Any) =&gt; Boolean</code> Check if <code>element</code> is present in the list. <code>indexOf</code> <code>(element: Any) =&gt; Boolean</code> Returns the index of <code>element</code> in the list. <code>lastIndexOf</code> <code>(element: Any) =&gt; Boolean</code> Returns the last index of <code>element</code> in the list. <code>remove</code> <code>(element: Any) =&gt; Boolean</code> Removes all <code>element</code> from the list. <code>sublist</code> <code>(start: Number, end: Number) =&gt; List&lt;Any&gt;</code> Returns a sub-list consisting elements between <code>start</code> and <code>end</code>. <code>find</code> <code>(predicate: (element: Any) =&gt; Boolean) =&gt; Any</code> Returns the matched element using the <code>predicate</code>. <code>findIndex</code> <code>(predicate: (element: Any) =&gt; Boolean) =&gt; Number</code> Returns the index of matched element using the <code>predicate</code>. <code>findLastIndex</code> <code>(predicate: (element: Any) =&gt; Boolean) =&gt; Number</code> Returns the last index of matched element using the <code>predicate</code>. <code>map</code> <code>(predicate: (element: Any) =&gt; Any) =&gt; List&lt;Any&gt;</code> Returns the list of mapped values using <code>predicate</code>. <code>filter</code> <code>(predicate: (element: Any) =&gt; Boolean) =&gt; List&lt;Any&gt;</code> Returns the list of filtered values using <code>predicate</code>. <code>sort</code> <code>(sortBy: (a: Any, b: Any) =&gt; Number) =&gt; List&lt;Any&gt;</code> Returns the sorted list of using <code>sortBy</code>. <code>flat</code> <code>(level: Number) =&gt; List&lt;Any&gt;</code> Returns the flatted list of level <code>level</code>. <code>flatDeep</code> <code>() =&gt; List&lt;Any&gt;</code> Returns the flatted list of level <code>this.length</code>. <code>unique</code> <code>() =&gt; List&lt;Any&gt;</code> Returns the list of unique elements. <code>forEach</code> <code>(predicate: (element: Any) =&gt; Null) =&gt; Null</code> Iterates the list using <code>predicate</code>."},{"location":"fubuki/data-types/#future","title":"Future","text":"<p>Represents a asynchronous value. Internally represented using Dart's <code>Future</code>. Futures are not directly creatable.</p> Example<pre><code>someFutureValue.await();\nsomeFutureValue.then(-&gt; x { print x; });\nsomeFutureValue.catchError(-&gt; err { print err; });\n</code></pre> Property Signature Description <code>await</code> <code>() =&gt; Any</code> Returns the result. <code>then</code> <code>((value: Any) =&gt; Any) =&gt; Null</code> Calls the callback when the value is resolved. <code>catchError</code> <code>((value: Any) =&gt; Any) =&gt; Null</code> Calls the callback when the future is failed. <p>Note</p> <p>Never leave instances of <code>Future</code>s unawaited. Unawaited futures are ignored by the virtual machine.</p>"},{"location":"fubuki/examples/","title":"Examples","text":""},{"location":"fubuki/examples/#hello-world","title":"Hello World!","text":"<pre><code>print \"Hello World!\";\n</code></pre>"},{"location":"fubuki/examples/#area-of-shapes","title":"Area of shapes","text":"<pre><code>square := {\n    area: -&gt; side : side * side,\n};\n\nrectangle := {\n    area: -&gt; length, breadth : length * breadth,\n};\n\nprint \"Area of square: \" + square.area(5);\nprint \"Area of rectangle: \" + rectangle.area(2, 3);\n</code></pre>"},{"location":"fubuki/examples/#print-until-100-and-as-a-list","title":"Print until 100 and as a list","text":"<pre><code>i := 0;\nnumbers := [];\nwhile (i &lt;= 100) {\n    print i;\n    numbers.add(i);\n    i = i + 1;\n}\nprint numbers;\n</code></pre>"},{"location":"fubuki/operators/","title":"Operators","text":""},{"location":"fubuki/operators/#unary-operators","title":"Unary Operators","text":""},{"location":"fubuki/operators/#unary-plus","title":"Unary Plus","text":"<p>Unary plus operator (<code>+</code>) can be used to represent a positive number.</p> Syntax<pre><code>+operand1\n</code></pre> Example<pre><code>+20\n+45.6\n+0\n+someNumberValue\n</code></pre>"},{"location":"fubuki/operators/#unary-negation","title":"Unary negation","text":"<p>Unary negation operator (<code>-</code>) can be used to represent a negative number or to invert the sign of a number.</p> Syntax<pre><code>+operand1\n</code></pre> Example<pre><code>-50\n-12.1\n-0\n-someNumberValue\n</code></pre>"},{"location":"fubuki/operators/#bitwise-not","title":"Bitwise NOT","text":"<p>Bitwise NOT operator (<code>~</code>) can be used to perform binary NOT operation on numbers.</p> Syntax<pre><code>-operand1\n</code></pre> Example<pre><code>~2\n~someNumberValue\n</code></pre>"},{"location":"fubuki/operators/#logical-not","title":"Logical NOT","text":"<p>Logical NOT operator (<code>!</code>) can be used to invert boolean or truthy value. This always returns a boolean value.</p> Syntax<pre><code>!operand1\n</code></pre> Example<pre><code>!true\n# false\n\n!false\n# true\n\n!someBooleanValue\n!someValue\n!!someValue\n</code></pre>"},{"location":"fubuki/operators/#call","title":"Call","text":"<p>Call operator (<code>()</code>) is used to invoke a function. They may take in parameters.</p> Syntax<pre><code>operand1([param1, param2, ..., param3])\n</code></pre> Example<pre><code>someFunctionValue()\nsomeFunctionValue(a, b, c)\nmain()\ndisplay(a, b, c)\n</code></pre>"},{"location":"fubuki/operators/#binary-operators","title":"Binary Operators","text":""},{"location":"fubuki/operators/#declaration","title":"Declaration","text":"<p>Declaration operator (<code>:=</code>) is used to declare a variable in the enclosing lexical scope. Variables cannot be re-declared.</p> Syntax<pre><code>variable := expr\n</code></pre> Example<pre><code>a := 2\nb := 3\n</code></pre>"},{"location":"fubuki/operators/#assignment","title":"Assignment","text":"<p>Assignment operator (<code>=</code>) can be used to set a new value to a variable.</p> Syntax<pre><code>variable = expr\n</code></pre> Example<pre><code>a = 3\nb = 4\n</code></pre>"},{"location":"fubuki/operators/#addition","title":"Addition","text":"<p>Addition operator (<code>=</code>) can be used to add two numbers or concate two strings.</p> Syntax<pre><code>operand1 + operand2\n</code></pre> Example<pre><code>3 + 2\n# 5\n\n\"Hello\" + \" World\"\n# Hello World\n\n\"Hello \" + 1\n# Hello1\n</code></pre>"},{"location":"fubuki/operators/#subtraction","title":"Subtraction","text":"<p>Subtraction operator (<code>-</code>) can be used to subtract two numbers.</p> Syntax<pre><code>operand1 - operand2\n</code></pre> Example<pre><code>5 - 2\n# 3\n</code></pre>"},{"location":"fubuki/operators/#multiplication","title":"Multiplication","text":"<p>Multiplication operator (<code>*</code>) can be used to multiply two numbers.</p> Syntax<pre><code>operand1 * operand2\n</code></pre> Example<pre><code>9 * 2\n# 18\n</code></pre>"},{"location":"fubuki/operators/#exponent","title":"Exponent","text":"<p>Exponent operator (<code>**</code>) can be used to calculate exponentiation result of two number.</p> Syntax<pre><code>operand1 ** operand2\n</code></pre> Example<pre><code>2 ** 3\n# 8\n</code></pre>"},{"location":"fubuki/operators/#division","title":"Division","text":"<p>Division operator (<code>/</code>) can be used to divide two numbers.</p> Syntax<pre><code>operand1 / operand2\n</code></pre> Example<pre><code>10 / 3\n# 3.333\n</code></pre>"},{"location":"fubuki/operators/#floor-division","title":"Floor Division","text":"<p>Floor Division operator (<code>//</code>) can be used to floor divide two numbers. This performs floor on the result after division.</p> Syntax<pre><code>operand1 // operand2\n</code></pre> Example<pre><code>10 // 3\n# 3\n</code></pre>"},{"location":"fubuki/operators/#remainder","title":"Remainder","text":"<p>Remainder operator (<code>%</code>) can be used to get remainder from division of two numbers.</p> Syntax<pre><code>operand1 % operand2\n</code></pre> Example<pre><code>11 % 2\n# 1\n</code></pre>"},{"location":"fubuki/operators/#equality","title":"Equality","text":"<p>Equality operator (<code>==</code>) can be used to find if two values are equal.</p> Syntax<pre><code>operand1 == operand2\n</code></pre> Example<pre><code>a == b\n\n1 == 2\n# false\n\n\"Hello\" == \"Hello\"\n# true\n\n\"Hello\" == \"World\"\n# false\n</code></pre>"},{"location":"fubuki/operators/#inequality","title":"Inequality","text":"<p>Inequality operator (<code>!=</code>) can be used to find if two values are not equal.</p> Syntax<pre><code>operand1 != operand2\n</code></pre> Example<pre><code>a != b\n\n1 != 2\n# true\n\n\"Hello\" != \"Hello\"\n# false\n\n\"Hello\" != \"World\"\n# true\n</code></pre>"},{"location":"fubuki/operators/#lesser-than","title":"Lesser Than","text":"<p>Lesser Than (<code>&lt;</code>) can be used to find if <code>a</code> is lesser than <code>b</code>.</p> Syntax<pre><code>operand1 &lt; operand2\n</code></pre> Example<pre><code>a &lt; b\n\n1 &lt; 2\n# true\n\n4 &lt; 2\n# false\n</code></pre>"},{"location":"fubuki/operators/#lesser-than-or-equal","title":"Lesser Than Or Equal","text":"<p>Lesser Than Or Equal (<code>&lt;=</code>) can be used to find if <code>a</code> is lesser than or equal to <code>b</code>.</p> Syntax<pre><code>operand1 &lt;= operand2\n</code></pre> Example<pre><code>a &lt;= b\n\n1 &lt;= 2\n# true\n\n3 &lt;= 3\n# true\n\n4 &lt;= 3\n# false\n</code></pre>"},{"location":"fubuki/operators/#greater-than","title":"Greater Than","text":"<p>Greater Than (<code>&gt;</code>) can be used to find if <code>a</code> is greater than <code>b</code>.</p> Syntax<pre><code>operand1 &gt; operand2\n</code></pre> Example<pre><code>a &gt; b\n\n1 &gt; 2\n# false\n\n4 &gt; 2\n# true\n</code></pre>"},{"location":"fubuki/operators/#greater-than-or-equal","title":"Greater Than Or Equal","text":"<p>Greater Than Or Equal (<code>&gt;=</code>) can be used to find if <code>a</code> is greater than or equal to <code>b</code>.</p> Syntax<pre><code>operand1 &gt;= operand2\n</code></pre> Example<pre><code>a &gt;= b\n\n1 &gt;= 2\n# false\n\n3 &gt;= 3\n# true\n\n4 &gt;= 3\n# true\n</code></pre>"},{"location":"fubuki/operators/#bitwise-or","title":"Bitwise OR","text":"<p>Bitwise OR operator (<code>|</code>) can be used to perform binary OR operation on two numbers.</p> Syntax<pre><code>operand1 | operand2\n</code></pre> Example<pre><code>a | b\n\n1 | 1\n# 1\n\n2 | 4\n# 6\n</code></pre>"},{"location":"fubuki/operators/#bitwise-and","title":"Bitwise AND","text":"<p>Bitwise AND operator (<code>&amp;</code>) can be used to perform binary AND operation on two numbers.</p> Syntax<pre><code>operand1 &amp; operand2\n</code></pre> Example<pre><code>a &amp; b\n\n1 &amp; 1\n# 1\n\n2 &amp; 4\n# 0\n\n4 &amp; 4\n# 4\n</code></pre>"},{"location":"fubuki/operators/#bitwise-xor","title":"Bitwise XOR","text":"<p>Bitwise XOR operator (<code>^</code>) can be used to perform binary XOR operation on two numbers.</p> Syntax<pre><code>operand1 ^ operand2\n</code></pre> Example<pre><code>a ^ b\n\n1 ^ 0\n# 1\n\n1 ^ 1\n# 0\n\n4 ^ 2\n# 6\n</code></pre>"},{"location":"fubuki/operators/#logical-or","title":"Logical OR","text":"<p>Logical OR operator (<code>||</code>) returns <code>true</code> if atleast one of two values is <code>true</code>.</p> Syntax<pre><code>operand1 || operand2\n</code></pre> Example<pre><code>a || b\n\ntrue || false\n# true\n\nfalse || false\n# false\n</code></pre>"},{"location":"fubuki/operators/#logical-and","title":"Logical AND","text":"<p>Logical AND operator (<code>&amp;&amp;</code>) returns <code>true</code> if both values are <code>true</code>.</p> Syntax<pre><code>operand1 &amp;&amp; operand2\n</code></pre> Example<pre><code>a &amp;&amp; b\n\ntrue &amp;&amp; true\n# true\n\ntrue &amp;&amp; false\n# false\n</code></pre>"},{"location":"fubuki/operators/#nullable-or","title":"Nullable OR","text":"<p>Nullable OR operator (<code>??</code>) can be used to return a alternative value when the primary value is <code>null</code>, i.e. returns right-hand side value if left-hand side value is <code>null</code>.</p> Syntax<pre><code>expr1 ?? expr2\n</code></pre> Example<pre><code>a ?? b\n\nnull ?? 2\n# 2\n\n1 ?? 2\n# 1\n</code></pre>"},{"location":"fubuki/operators/#member-access","title":"Member Access","text":"<p>Member Access operator (<code>.</code>) can be used to access properties of an object.</p> Syntax<pre><code>object.property\n</code></pre> Example<pre><code>someObjectValue.propertyA\nsomeObjectValue.propertyA.propertyB\n</code></pre>"},{"location":"fubuki/operators/#computed-member-access","title":"Computed Member Access","text":"<p>Member Access operator (<code>.</code>) can be used to access properties of an object but they accessor is an expression.</p> Syntax<pre><code>object[expr]\n</code></pre> Example<pre><code>someObjectValue['propertyA']\nsomeObjectValue['propertyA']['propertyB']\n</code></pre>"},{"location":"fubuki/operators/#nullable-access","title":"Nullable Access","text":"<p>Nullable Access operator (<code>?.</code>) can be used to access properties of an object or <code>null</code>. This returns <code>null</code>, if the accessor is on a <code>null</code> value.</p> Syntax<pre><code>value?.property\n</code></pre> Example<pre><code>someObjectValueOrNull?.propertyA\nsomeObjectValueOrNull?.propertyA.propertyB\n\n# can also be used with computed member access\nsomeObjectValueOrNull?.['propertyA']\n</code></pre>"},{"location":"fubuki/operators/#ternary-operator","title":"Ternary Operator","text":"<p>Ternary operator (<code>?:</code>) has a condition and two values that is evaluated as per the truthiness of the condition.</p> Syntax<pre><code>condition ? trueExpr : falseExpr\n</code></pre> Example<pre><code>1 &gt; 2 ? \"Yes!\" : \"No!\"\n# No!\n\n4 &lt; 2 ? 2 : 4\n# 4\n</code></pre>"},{"location":"fubuki/operators/#grouping","title":"Grouping","text":"<p>Expressions surrounded by parenthesis (<code>()</code>) are evaluated first.</p> Syntax<pre><code>(expr)\n</code></pre> Example<pre><code>1 - (2 + 4)\n# -5\n</code></pre>"},{"location":"fubuki/operators/#precedence-table","title":"Precedence Table","text":"Name Operator Precedence Default - 0 Declaration <code>\u2026 := \u2026</code> 1 Assignment <code>\u2026 = \u2026</code> 1 Ternary <code>\u2026 ? \u2026 : \u2026</code> 1 Logical OR <code>\u2026 \\|\\| \u2026</code> 2 Nullable OR <code>\u2026 ?? \u2026</code> 2 Logical AND <code>\u2026 &amp;&amp; \u2026</code> 3 Bitwise OR <code>\u2026 \\| \u2026</code> 4 Bitwise XOR <code>\u2026 ^ \u2026</code> 5 Bitwise AND <code>\u2026 &amp; \u2026</code> 6 Equality <code>\u2026 == \u2026</code> 7 Inequality <code>\u2026 != \u2026</code> 7 Lesser Than <code>\u2026 &lt; \u2026</code> 8 Lesser Than Or Equal <code>\u2026 &lt;= \u2026</code> 8 Greater Than <code>\u2026 &gt; \u2026</code> 8 Greater Than Or Equal <code>\u2026 &gt;= \u2026</code> 8 Addition <code>\u2026 + \u2026</code> 9 Subtraction <code>\u2026 - \u2026</code> 9 Multiplication <code>\u2026 * \u2026</code> 10 Division <code>\u2026 / \u2026</code> 10 Floor Division <code>\u2026 // \u2026</code> 10 Remainder <code>\u2026 % \u2026</code> 10 Exponent <code>\u2026 ** \u2026</code> 11 Logical NOT <code>! \u2026</code> 12 Bitwise NOT <code>~ \u2026</code> 12 Unary Plus <code>+ \u2026</code> 12 Unary Negation <code>- \u2026</code> 12 Call <code>\u2026 ()</code> 13 Member Access <code>\u2026 . \u2026</code> 13 Computed Member Access <code>\u2026 [ \u2026 ]</code> 13 Nullable Access <code>\u2026 ?. \u2026</code> 13 Grouping <code>( \u2026 )</code> 14"},{"location":"fubuki/statements/","title":"Statements","text":"<p>Statements is a line of code that commands a task. Each program is made up of sequence of statements. Statements must end with a semi-colon (<code>;</code>).</p>"},{"location":"fubuki/statements/#declaration-assignment-statement","title":"Declaration &amp; Assignment Statement","text":"<p>Refer declaration and assignment operator.</p>"},{"location":"fubuki/statements/#expression-statement","title":"Expression Statement","text":"<p>Contains nothing but an expression.</p> Syntax<pre><code>expr;\n</code></pre> Example<pre><code>1 + 1;\n\"Hello World\";\nhelloWorld;\n</code></pre>"},{"location":"fubuki/statements/#block-statement","title":"Block Statement","text":"<p>Creates a lexical scope and contains a sequence of statements.</p> Syntax<pre><code>{\n    statement1;\n    statement2;\n    ...\n    statementN;\n}\n</code></pre> Example<pre><code>{\n    a := 2;\n    print a;\n}\n</code></pre>"},{"location":"fubuki/statements/#if-else-statement","title":"If-Else Statement","text":"<p>If-else statement is a conditional control-flow statement that allows skipping code. Supports simple <code>if</code>, <code>if-else</code> and <code>if-else</code> ladder.</p> Syntax<pre><code>if (condition)\n    statement1\n\nif (condition)\n    statement1\nelse\n    statement2\n\nif (condition1)\n    statement1\nelse if (condition2)\n    statement2\nelse\n    statement3\n</code></pre> Example<pre><code>if (true) print \"Hello World\";\n\nif (false) print \"Hello World\";\nelse print \"Goodbye World\";\n\ntext := \"\"\nif (true) {\n    text = \"Hello World\";\n} else {\n    text = \"Goodbye World\";\n}\nprint text;\n</code></pre>"},{"location":"fubuki/statements/#while-statement","title":"While Statement","text":"<p>While statements allows repeating a set of code until the condition goes falsey. <code>break</code> and <code>continue</code> statement can be used inside a loop.</p> Syntax<pre><code>while (condition) {\n    statement\n}\n</code></pre> Example<pre><code>i := 0;\nwhile (i &lt; 5) {\n    print i;\n    i = i + 1;\n}\n# 0 1 2 3 4\n</code></pre>"},{"location":"fubuki/statements/#break-statement","title":"Break Statement","text":"<p>Break statement can be used to terminate the enclosing loop. This is done using the <code>break</code> keyword.</p> Syntax<pre><code>break;\n</code></pre> Example<pre><code>i := 0;\nwhile (true) {\n    print i;\n    i = i + 1;\n    if (i &gt; 2) break;\n}\n# 0 1 2\n</code></pre>"},{"location":"fubuki/statements/#continue-statement","title":"Continue Statement","text":"<p>Continue statement can be used to skip current iteration. This is done using the <code>continue</code> keyword.</p> Syntax<pre><code>continue;\n</code></pre> Example<pre><code>i := 0;\nwhile (i &lt; 6) {\n    i = i + 1;\n    if (i % 2 == 0) continue;\n    print i;\n}\n# 1 3 5\n</code></pre>"},{"location":"fubuki/statements/#try-catch-statement","title":"Try-Catch Statement","text":"<p>Try-catch statement is used to handle exceptions and unintended behaviours. Try-catch consists a <code>try</code> block that might throw exceptions and <code>catch</code> block that handles the exception.</p> Syntax<pre><code>try {\n    tryStatements\n} catch (exception) {\n    catchStatements\n}\n</code></pre> Example<pre><code>try {\n    throw \"Hello World!\";\n} catch (err) {\n    print err;\n}\n# Hello World!\n</code></pre>"},{"location":"fubuki/statements/#throw-statement","title":"Throw Statement","text":"<p>Throw statements can be used to propogate exceptions. This is done using the <code>throw</code> keyword.</p> Syntax<pre><code>throw expr;\n</code></pre> Example<pre><code>throw \"Hello World!\";\nthrow Exception.new(\"Oops!\");\n</code></pre>"},{"location":"fubuki/statements/#when-statement","title":"When Statement","text":"<p>When statements can be used as an alternative to <code>if-else</code> ladder. Each case takes in an conditional expression, and is executed if they are truthy. The <code>else</code> case is invoked if none evaluates to a truthy value. Atmost one case is executed.</p> Syntax<pre><code>when {\n    expr1: statement1\n    expr2: statement2\n    ...\n    exprN: statementN\n    else: elseStatement\n}\n</code></pre> Example<pre><code>a := 2\nb := 3\nwhen {\n    a &gt; b: {\n        print \"Yes\";\n    }\n    else: print \"No\";\n}\n# No\n</code></pre>"},{"location":"fubuki/statements/#match-statement","title":"Match Statement","text":"<p>Match statements can be used to match values against the case values. Each case takes in an expression that evaluates to a value, and is executed if they are equal. The <code>else</code> case is invoked if none matches. Atmost one case is executed.</p> Syntax<pre><code>match (expr) {\n    expr1: statement1\n    expr2: statement2\n    ...\n    exprN: statementN\n    else: elseStatement\n}\n</code></pre> Example<pre><code>a := 0\nmatch (a) {\n    -1: {\n        print \"Found: -1\";\n    }\n    0: print \"Found: 0\";\n    1: print \"Found: 1\";\n    else: print a;\n}\n# Found: 0\n</code></pre>"},{"location":"fubuki/statements/#return-statement","title":"Return Statement","text":"<p>Return statement is used to return a value from the function body to it's call. This is done using the <code>return</code> keyword. If no value is specified, <code>null</code> value is returned.</p> Syntax<pre><code>return;\nreturn expr;\n</code></pre> Example<pre><code>return;\nreturn null;\nreturn \"Hello World\";\n</code></pre>"},{"location":"fubuki/statements/#import-statements","title":"Import Statements","text":"<p>Import statements are used to import other modules into current module. The top-most lexical scope of the module is mirrored.</p> Syntax<pre><code>import \"filename\" as variable;\n</code></pre> Example<pre><code>import \"utils.fbs\" as utils;\n\nprint utils.helloWorld;\nutils.displayHelloWorld();\n</code></pre>"},{"location":"fubuki/statements/#print-statement","title":"Print Statement","text":"<p>Print statement is used to print a value to the terminal. This is done using the <code>print</code> keyword. This statement cannot be used if <code>disablePrint</code> is set to <code>true</code>.</p> Syntax<pre><code>print expr;\n</code></pre> Example<pre><code>print 1;\nprint \"Hello World\";\n</code></pre>"},{"location":"fubuki/Native-APIs/boolean/","title":"Boolean","text":""},{"location":"fubuki/Native-APIs/boolean/#booleanfrom","title":"<code>Boolean.from</code>","text":"<p>Takes in a value and returns the boolean equivalent.</p> <pre><code>Boolean.from(0);\n# false\n\nBoolean.from(1);\n# false\n\nBoolean.from(null);\n# false\n</code></pre>"},{"location":"fubuki/Native-APIs/convert/","title":"Convert","text":""},{"location":"fubuki/Native-APIs/convert/#objects","title":"Objects","text":""},{"location":"fubuki/Native-APIs/convert/#byteslist","title":"BytesList","text":"<p>An internally represented bytes list.</p> Property Signature Description <code>bytes</code> <code>() =&gt; List&lt;Number&gt;</code> Returns the bytes as a list."},{"location":"fubuki/Native-APIs/convert/#convertnewbyteslist","title":"<code>Convert.newBytesList</code>","text":"<p>Takes in an optional byte list and returns a <code>BytesList</code>.</p> <pre><code>bytes := Convert.newBytesList();\n# internally, []\n\nbytes = Convert.newBytesList([0, 1, 2]);\n# internally, [0, 1, 2]\n\nbytes.bytes();\n# returns the internal list, [0, 1, 2]\n</code></pre>"},{"location":"fubuki/Native-APIs/convert/#convertencodeascii","title":"<code>Convert.encodeAscii</code>","text":"<p>Takes in a string and returns a <code>BytesList</code>.</p> <pre><code>Convert.encodeAscii(\"Hello\");\n# internally, [72, 101, 108, 108, 111]\n</code></pre>"},{"location":"fubuki/Native-APIs/convert/#convertdecodeascii","title":"<code>Convert.decodeAscii</code>","text":"<p>Takes in a <code>BytesList</code> and returns a string.</p> <pre><code>bytes := Convert.newBytesList([72, 101, 108, 108, 111]);\nConvert.decodeAscii(bytes);\n# Hello\n</code></pre>"},{"location":"fubuki/Native-APIs/convert/#convertencodebase64","title":"<code>Convert.encodeBase64</code>","text":"<p>Takes in a <code>BytesList</code> and returns a base64 string.</p> <pre><code>bytes := Convert.newBytesList([72, 101, 108, 108, 111]);\nConvert.encodeBase64(bytes);\n# SGVsbG8=\n</code></pre>"},{"location":"fubuki/Native-APIs/convert/#convertdecodebase64","title":"<code>Convert.decodeBase64</code>","text":"<p>Takes in a base64 string and returns a <code>BytesList</code>.</p> <pre><code>Convert.decodeBase64(\"SGVsbG8=\");\n# internally, [72, 101, 108, 108, 111]\n</code></pre>"},{"location":"fubuki/Native-APIs/convert/#convertencodelatin1","title":"<code>Convert.encodeLatin1</code>","text":"<p>Takes in a string and returns a <code>BytesList</code>.</p> <pre><code>Convert.encodeLatin1(\"Hello\");\n# internally, [72, 101, 108, 108, 111]\n</code></pre>"},{"location":"fubuki/Native-APIs/convert/#convertdecodelatin1","title":"<code>Convert.decodeLatin1</code>","text":"<p>Takes in a <code>BytesList</code> and returns a string.</p> <pre><code>bytes := Convert.newBytesList([72, 101, 108, 108, 111]);\nConvert.decodeLatin1(bytes);\n# Hello\n</code></pre>"},{"location":"fubuki/Native-APIs/convert/#convertencodeutf8","title":"<code>Convert.encodeUtf8</code>","text":"<p>Takes in a string and returns a <code>BytesList</code>.</p> <pre><code>Convert.encodeUtf8(\"Hello\");\n# internally, [72, 101, 108, 108, 111]\n</code></pre>"},{"location":"fubuki/Native-APIs/convert/#convertdecodeutf8","title":"<code>Convert.decodeUtf8</code>","text":"<p>Takes in a <code>BytesList</code> and returns a string.</p> <pre><code>bytes := Convert.newBytesList([72, 101, 108, 108, 111]);\nConvert.decodeUtf8(bytes);\n# Hello\n</code></pre>"},{"location":"fubuki/Native-APIs/convert/#convertencodejson","title":"<code>Convert.encodeJson</code>","text":"<p>Takes in a value and returns json string.</p> <pre><code>json := {\n    hello: \"world\",\n};\nConvert.encodeJson(json);\n# {\"hello\":\"world\"}\n</code></pre>"},{"location":"fubuki/Native-APIs/convert/#convertdecodejson","title":"<code>Convert.decodeJson</code>","text":"<p>Takes in a json string and returns a value.</p> <pre><code>json := '{\"hello\":\"world\"}';\nConvert.decodeJson(json);\n# { hello: \"world\" }\n</code></pre>"},{"location":"fubuki/Native-APIs/datetime/","title":"DateTime","text":""},{"location":"fubuki/Native-APIs/datetime/#objects","title":"Objects","text":""},{"location":"fubuki/Native-APIs/datetime/#datetimeinst","title":"DateTimeInst","text":"<p>Contains information about the time.</p> Property Signature Description <code>day</code> <code>Number</code> Date of the month. <code>[1..31]</code> <code>weekday</code> <code>Number</code> Day of the week. <code>[1..7]</code> (<code>1</code> - Monday, ..., <code>7</code> - Sunday) <code>month</code> <code>Number</code> Month of the year. <code>[1..12]</code> <code>year</code> <code>Number</code> Year. <code>hour</code> <code>Number</code> Hour of the day. <code>[0..23]</code> <code>minute</code> <code>Number</code> Minute of the hour. <code>[0..59]</code> <code>second</code> <code>Number</code> Second of the minute. <code>[0..59]</code> <code>millisecond</code> <code>Number</code> Milliseconds of the second. <code>[0..999]</code> <code>millisecondsSinceEpoch</code> <code>Number</code> Number of milliseconds since the Unix Epoch. <code>timeZoneName</code> <code>String</code> Name of the time zone. <code>timeZoneOffset</code> <code>Number</code> Difference between local time and UTC in milliseconds. <code>iso</code> <code>String</code> ISO-8601 full-precision extended format representation."},{"location":"fubuki/Native-APIs/datetime/#datetimefrommillisecondssinceepoch","title":"<code>DateTime.fromMillisecondsSinceEpoch</code>","text":"<p>Takes in an number (milliseconds since epoch) and returns a <code>DateTimeInst</code>.</p> <pre><code>ms := 1673540148833;\nDateTime.fromMillisecondsSinceEpoch(ms);\n</code></pre>"},{"location":"fubuki/Native-APIs/datetime/#datetimeparse","title":"<code>DateTime.parse</code>","text":"<p>Takes in a ISO string, date string, time string or any parsable date-time value and returns a <code>DateTimeInst</code>.</p> <pre><code>DateTime.parse(\"20/10/2023\");\n</code></pre>"},{"location":"fubuki/Native-APIs/datetime/#datetimenow","title":"<code>DateTime.now</code>","text":"<p>Returns a <code>DateTimeInst</code> of current time.</p> <pre><code>DateTime.now();\n</code></pre>"},{"location":"fubuki/Native-APIs/exception/","title":"Exception","text":""},{"location":"fubuki/Native-APIs/exception/#objects","title":"Objects","text":""},{"location":"fubuki/Native-APIs/exception/#exception_1","title":"Exception","text":"<p>Contains information about an exception.</p> Property Signature <code>message</code> <code>String</code> <code>stackTrace</code> <code>String</code>"},{"location":"fubuki/Native-APIs/exception/#exceptionnew","title":"<code>Exception.new</code>","text":"<p>Takes in a message, optional stack trace and returns a <code>Exception</code>.</p> <pre><code>Exception.new(\"Something went wrong!\");\n# Exception: Something went wrong!\n# Stack Trace:\n# ...\n\nException.new(\"Something went wrong!\", \"at line 1\");\n# Exception: Something went wrong!\n# Stack Trace:\n# at line 1\n</code></pre>"},{"location":"fubuki/Native-APIs/function/","title":"Function","text":""},{"location":"fubuki/Native-APIs/function/#functioncall","title":"<code>Function.call</code>","text":"<p>Takes in an function, list of arguments and returns the result of the function after calling.</p> <pre><code>Function.call(someFunction, [a, b, c]);\n</code></pre>"},{"location":"fubuki/Native-APIs/future/","title":"Future","text":""},{"location":"fubuki/Native-APIs/future/#objects","title":"Objects","text":""},{"location":"fubuki/Native-APIs/future/#completer","title":"Completer","text":"<p>Represents a completable future.</p> Property Signature Description <code>future</code> <code>Future</code> The future value <code>complete</code> <code>(value: Any) =&gt; null</code> Resolves the future. <code>fail</code> <code>(value: Any) =&gt; null</code> Fails the future."},{"location":"fubuki/Native-APIs/future/#futurenew","title":"<code>Future.new</code>","text":"<p>Returns a new <code>Completer</code>.</p> <pre><code>completer := Future.new();\nfuture := completer.future;\nfuture.then(-&gt; x {\n    print x;\n    # 1\n});\ncompleter.complete(1);\nprint future.await();\n# 1\n</code></pre>"},{"location":"fubuki/Native-APIs/future/#futuremaybeawait","title":"<code>Future.maybeAwait</code>","text":"<p>Takes in a value and returns the result of the future if it's a future, or just returns the original value.</p> <pre><code>Future.maybeAwait(someFutureValue);\n</code></pre>"},{"location":"fubuki/Native-APIs/future/#futurewait","title":"<code>Future.wait</code>","text":"<p>Takes in duration in milliseconds and returns a future that resolved after the duration.</p> <pre><code>Future.wait(1000);\n# waits 1 second\n</code></pre>"},{"location":"fubuki/Native-APIs/future/#futureawaitall","title":"<code>Future.awaitAll</code>","text":"<p>Takes in a list of futures and returns the list of resolved values.</p> <pre><code>Future.awaitAll([futureValue1, futureValue2, ..., futureValueN]);\n</code></pre>"},{"location":"fubuki/Native-APIs/future/#futureany","title":"<code>Future.any</code>","text":"<p>Takes in a list of futures and returns the value of any one future.</p> <pre><code>Future.any([futureValue1, futureValue2, ..., futureValueN]);\n</code></pre>"},{"location":"fubuki/Native-APIs/globals/","title":"Globals","text":""},{"location":"fubuki/Native-APIs/globals/#typeof","title":"<code>typeof</code>","text":"<p>Takes in a value and returns the type. The type will be any one of <code>Boolean</code>, <code>Function</code>, <code>NativeFunction</code>, <code>AsyncNativeFunction</code>, <code>Null</code>, <code>Number</code>, <code>String</code>, <code>Object</code>, <code>List</code> or <code>Future</code>.</p> <pre><code>typeof(10);\n# Number\n\ntypeof(\"Hello\");\n# String\n</code></pre>"},{"location":"fubuki/Native-APIs/list/","title":"List","text":""},{"location":"fubuki/Native-APIs/list/#listfrom","title":"<code>List.from</code>","text":"<p>Takes in a value and returns a list. If the value is a list, the list is cloned. If the value is a map, the entries are returned. An exception is thrown if it is neither of these.</p> <pre><code>List.from([0, 1, 2]);\n# [0, 1, 2]\n\nList.from({ hello: \"world\" });\n# [[\"hello\", \"world\"]]\n</code></pre>"},{"location":"fubuki/Native-APIs/list/#listgenerate","title":"<code>List.generate</code>","text":"<p>Takes in a length, a predicate that returns a value and returns the generated list.</p> <pre><code>List.from(3, -&gt; i : i + 1);\n# [1, 2, 3]\n</code></pre>"},{"location":"fubuki/Native-APIs/list/#listfilled","title":"<code>List.filled</code>","text":"<p>Takes in a length, a value and returns the list.</p> <pre><code>List.from(3, 10);\n# [10, 10, 10]\n</code></pre>"},{"location":"fubuki/Native-APIs/number/","title":"Number","text":""},{"location":"fubuki/Native-APIs/number/#numberinfinity","title":"<code>Number.infinity</code>","text":"<p>Returns infinity.</p> <pre><code>Number.infinity\n# Infinity\n</code></pre>"},{"location":"fubuki/Native-APIs/number/#numbernegativeinfinity","title":"<code>Number.negativeInfinity</code>","text":"<p>Returns negative infinity.</p> <pre><code>Number.negativeInfinity\n# -Infinity\n</code></pre>"},{"location":"fubuki/Native-APIs/number/#numbernan","title":"<code>Number.NaN</code>","text":"<p>Returns <code>NaN</code>.</p> <pre><code>Number.NaN\n# NaN\n</code></pre>"},{"location":"fubuki/Native-APIs/number/#numbermaxfinite","title":"<code>Number.maxFinite</code>","text":"<p>Returns the maximum value of number.</p> <pre><code>Number.maxFinite\n# 1.7976931348623157e+308\n</code></pre>"},{"location":"fubuki/Native-APIs/number/#numberfrom","title":"<code>Number.from</code>","text":"<p>Takes in a value and returns a number.</p> <pre><code>Number.from(\"10\");\n# 10\n\nNumber.from(11);\n# 10\n</code></pre>"},{"location":"fubuki/Native-APIs/number/#numberfromornull","title":"<code>Number.fromOrNull</code>","text":"<p>Takes in a value and returns a number or <code>null</code>.</p> <pre><code>Number.from(\"10\");\n# 10\n\nNumber.from([]);\n# null\n</code></pre>"},{"location":"fubuki/Native-APIs/object/","title":"Object","text":""},{"location":"fubuki/Native-APIs/object/#objectfrom","title":"<code>Object.from</code>","text":"<p>Takes in an object and returns the clone of it.</p> <pre><code>Object.from({});\n# {}\n\nObject.from({ hello: \"world\" });\n# { hello: \"world\" }\n</code></pre>"},{"location":"fubuki/Native-APIs/object/#objectfromentries","title":"<code>Object.fromEntries</code>","text":"<p>Takes in an list of entries and returns an object.</p> <pre><code>Object.fromEntries([]);\n# {}\n\nObject.fromEntries([[\"hello\", \"world\"]]);\n# { hello: \"world\" }\n</code></pre>"},{"location":"fubuki/Native-APIs/object/#objectapply","title":"<code>Object.apply</code>","text":"<p>Takes in two objects and returns object A after applying properties of object B to object A.</p> <pre><code>a := {};\nb := {\n    hello: \"world\",\n};\n\nObject.apply(a, b);\n\nprint a;\n# { hello: \"world\" }\n</code></pre>"},{"location":"fubuki/Native-APIs/object/#objectentries","title":"<code>Object.entries</code>","text":"<p>Takes in an object and returns a list of key-value pairs in a list.</p> <pre><code>Object.entries({ hello: \"world\", foo: \"bar\" });\n# [[\"hello\", \"world\"], [\"foo\", \"bar\"]]\n</code></pre>"},{"location":"fubuki/Native-APIs/object/#objectkeys","title":"<code>Object.keys</code>","text":"<p>Takes in an object and returns a list of keys.</p> <pre><code>Object.keys({ hello: \"world\", foo: \"bar\" });\n# [\"hello\", \"foo\"]\n</code></pre>"},{"location":"fubuki/Native-APIs/object/#objectvalues","title":"<code>Object.values</code>","text":"<p>Takes in an object and returns a list of values.</p> <pre><code>Object.values({ hello: \"world\", foo: \"bar\" });\n# [\"world\", \"bar\"]\n</code></pre>"},{"location":"fubuki/Native-APIs/object/#objectclone","title":"<code>Object.clone</code>","text":"<p>Takes in an object and returns a clone of it.</p> <pre><code>Object.clone({ hello: \"world\" });\n# { hello: \"world\" }\n</code></pre>"},{"location":"fubuki/Native-APIs/object/#objectdeleteproperty","title":"<code>Object.deleteProperty</code>","text":"<p>Takes in an object, a key and removes the key from the object.</p> <pre><code>value := { hello: \"world\", foo: \"bar\" };\nObject.deleteProperty(value, \"hello\");\nprint value;\n# { foo: \"bar\" }\n</code></pre>"},{"location":"fubuki/Native-APIs/regex/","title":"RegExp","text":""},{"location":"fubuki/Native-APIs/regex/#objects","title":"Objects","text":""},{"location":"fubuki/Native-APIs/regex/#regexp_1","title":"RegExp","text":"<p>The regular expression.</p> Property Signature Description <code>isCaseInsensitive</code> <code>Boolean</code> Is case insensitive flag enabled? <code>isDotAll</code> <code>Boolean</code> Is dot-all flag enabled? <code>isMultiline</code> <code>Boolean</code> Is multiline flag enabled? <code>isUnicode</code> <code>Boolean</code> Is unicode flag enabled? <code>pattern</code> <code>String</code> Regular expression pattern. <code>hasMatch</code> <code>(input: String) =&gt; Boolean</code> Does <code>input</code> has matches against the pattern. <code>stringMatch</code> <code>(input: String) =&gt; String</code> Returns the string match of <code>input</code> against the pattern. <code>firstMatch</code> <code>(input: String) =&gt; RegExpMatch?</code> Returns the match of <code>input</code> against the pattern. <code>allMatches</code> <code>(input: String) =&gt; List&lt;RegExpMatch&gt;</code> Returns the all the matches of <code>input</code> against the pattern. <code>replaceFirst</code> <code>(input: String, with: String) =&gt; String</code> Returns a string after replacing first match of <code>input</code> against the pattern using <code>with</code>. <code>replaceAll</code> <code>(input: String, with: String) =&gt; String</code> Returns a string after replacing all the matches of <code>input</code> against the pattern using <code>with</code>. <code>replaceFirstMapped</code> <code>(input: String, with: (RegExpMatch) =&gt; String) =&gt; String</code> Returns a string after replacing first match of <code>input</code> against the pattern using the value returned by <code>with</code>. <code>replaceAllMapped</code> <code>(input: String, with: (RegExpMatch) =&gt; String) =&gt; String</code> Returns a string after replacing all the matches of <code>input</code> against the pattern using the value returned by <code>with</code>."},{"location":"fubuki/Native-APIs/regex/#regexpmatch","title":"RegExpMatch","text":"<p>Contains information about a regular expression match.</p> Property Signature Description <code>input</code> <code>String</code> The input. <code>groupCount</code> <code>Number</code> The number of groups. <code>groupNames</code> <code>List&lt;String&gt;</code> The names of the groups. <code>namedGroup</code> <code>(groupName: String) =&gt; RegExpMatch?</code> Returns the match using the <code>groupName</code>. <code>group</code> <code>(index: Number) =&gt; RegExpMatch?</code> Returns the match at the <code>index</code>."},{"location":"fubuki/Native-APIs/regex/#regexpfrom","title":"<code>RegExp.from</code>","text":"<p>Takes in a value and returns the boolean equivalent.</p> <pre><code>RegExp.from(r\"\\w+\");\n# regexp of pattern \\w+\n\nRegExp.from(\"\\\\d+\");\n# regexp of pattern \\d+\n</code></pre>"},{"location":"fubuki/Native-APIs/string/","title":"String","text":""},{"location":"fubuki/Native-APIs/string/#stringfrom","title":"<code>String.from</code>","text":"<p>Takes in a value and returns a string.</p> <pre><code>String.from(false);\n# \"false\"\n\nString.from(1);\n# \"1\"\n\nString.from([1, 2, 3]);\n# \"[1, 2, 3]\"\n</code></pre>"},{"location":"fubuki/Native-APIs/string/#stringfromcodeunit","title":"<code>String.fromCodeUnit</code>","text":"<p>Takes in a byte and returns the equivalent character value as string.</p> <pre><code>String.fromCodeUnit(72);\n# H\n</code></pre>"},{"location":"fubuki/Native-APIs/string/#stringfromcodeunits","title":"<code>String.fromCodeUnits</code>","text":"<p>Takes in a byte and returns the equivalent character value as string.</p> <pre><code>String.fromCodeUnit([72, 101, 108, 108, 111]);\n# Hello\n</code></pre>"},{"location":"tenka/disclaimer/","title":"Disclaimer","text":"<ul> <li>The information provided by this project is solely for personal use only.</li> <li>The core aim of this project is to efficiently parse sites without any advertisements.</li> <li>The content served by the modules has no control.</li> <li>The developer of this organization does not take any responsibility for the content displayed by the modules and is not affliated with them by any means.</li> <li>Most of the contents served by the module are from public websites that are accessible by anyone through a browser.</li> <li>Any DMCA or copyright infrigment must be forwarded to the website and not to the developer.</li> <li>This project must be used at the risk of the user based on their government laws.</li> </ul>"},{"location":"tenka/store/","title":"Store","text":""},{"location":"tenka/store/#configuration","title":"Configuration","text":"<pre><code># name of the extension\nname: some-site.com\n\n# repository details\nrepo:\nusername: your-github-username\nrepo: your-github-repo-name\nref: sha-of-the-commit\n\n# source code's path\nsource:\nroot: path/to/directory\nfile: filename.ht\n\n# thumbnail's path (Resolution must be 96x96 and a png)\nthumbnail: path/to/logo.png\n\n# could contain nsfw content\nnsfw: false\n</code></pre> <p>More examples can be viewed here.</p>"},{"location":"yukimi/advanced_usage/","title":"Advanced Usage","text":""},{"location":"yukimi/advanced_usage/#bulk-downloading","title":"Bulk Downloading","text":"<p>The <code>episodes</code> and <code>chapters</code> option supports selection in bulk.</p> <p>Allowed Formats:</p> <ul> <li><code>x,y,z</code> - Multiple values which are comma-seperated.</li> <li><code>x..y</code> or <code>x...y</code> - From-to range.</li> <li><code>x+y</code>, <code>x-y</code> - Mathematical operation.</li> </ul> <p>Available Variables:</p> <ul> <li><code>first</code> - First episode number.</li> <li><code>last</code> - Last episode number.</li> </ul> <p>Valid Examples:</p> <ul> <li><code>1,2,3</code> - Selects episode 1, 2 and 3.</li> <li><code>1..3</code> or <code>1...3</code> - Selects 1, 2 and 3.</li> <li><code>first..last</code> or <code>first...last</code> - Selects all the episodes.</li> <li><code>first..first+2</code> - Selects first 2 episodes.</li> <li><code>last-2..last</code> - Selects last 2 episodes.</li> </ul>"},{"location":"yukimi/advanced_usage/#argument-variables","title":"Argument Variables","text":"<p>Options like <code>destination</code>, <code>filename</code> supports templates which will be replaced with actual values. For example, <code>${anime.name}</code> will be replaced with the actual anime name. List of all the available templates can be checked here.</p>"},{"location":"yukimi/advanced_usage/#json-mode","title":"JSON-mode","text":"<p>JSON mode can be used to obtain results in JSON format. Other applications can take advantage of this feature. This can be done using the global <code>json</code> flag.</p> <pre><code>yukimi tenka store --json\n</code></pre>"},{"location":"yukimi/basic_usage/","title":"Basic Usage","text":""},{"location":"yukimi/basic_usage/#accepting-usage-policy","title":"Accepting usage policy","text":"<p>You must agree to the usage policy to use the application. This can be done using the <code>agree-to-usage-policy</code> command.</p> <pre><code>yukimi agree-to-usage-policy\n</code></pre>"},{"location":"yukimi/basic_usage/#use-terminal-mode","title":"Use Terminal Mode","text":"<p>Use the <code>terminal</code> command to open a nested terminal. It is way faster than traditionally invoking the executable multiple times. This can be done using <code>yukimi&lt;path/to/executable&gt; -t</code>.</p> <p>Do:</p> <pre><code>yukimi -t\n&gt; help\n&gt; tenka installed\n</code></pre> <p>Don't:</p> <pre><code>yukimi help\nyukimi tenka installed\n</code></pre>"},{"location":"yukimi/basic_usage/#modules","title":"Modules","text":"<p>You must install modules to use the core commands within the application.</p>"},{"location":"yukimi/basic_usage/#listing-all-modules","title":"Listing all modules","text":"<pre><code>yukimi -t\n&gt; tenka store\n</code></pre>"},{"location":"yukimi/basic_usage/#installing-a-module","title":"Installing a module","text":"<pre><code>yukimi -t\n&gt; tenka install &lt;module-name&gt;\n&gt; tenka install hanime.tv readm.org\n</code></pre>"},{"location":"yukimi/basic_usage/#uninstalling-a-module","title":"Uninstalling a module","text":"<pre><code>yukimi -t\n&gt; tenka uninstall &lt;module-name&gt;\n&gt; tenka uninstall hanime.tv\n</code></pre>"},{"location":"yukimi/basic_usage/#listing-all-installed-modules","title":"Listing all installed modules","text":"<pre><code>yukimi -t\n&gt; tenka installed\n</code></pre> <p>Note</p> <p>Extensions are auto-updated upon restarting the application.</p>"},{"location":"yukimi/basic_usage/#anime","title":"Anime","text":""},{"location":"yukimi/basic_usage/#searching-an-anime","title":"Searching an anime","text":"<pre><code>yukimi -t\n&gt; anime search &lt;module-name&gt; \"&lt;anime-name&gt;\"\n&gt; anime search hanime.tv \"overflow season 1\"\n</code></pre>"},{"location":"yukimi/basic_usage/#viewing-an-anime","title":"Viewing an anime","text":"<pre><code>yukimi -t\n&gt; anime info &lt;module-name&gt; \"&lt;anime-url&gt;\"\n&gt; anime info hanime.tv \"https://hanime.tv/videos/hentai/overflow-season-1\"\n</code></pre> <p>This lists all the information and episodes of the anime.</p>"},{"location":"yukimi/basic_usage/#playing-an-anime","title":"Playing an anime","text":"<p>To play an anime, you must have <code>mpv</code> installed. The <code>PATH</code> environment variable should contain the path to <code>mpv</code> or it can be set in the application settings.</p> <pre><code>yukimi -t\n&gt; anime info hanime.tv \"https://hanime.tv/videos/hentai/overflow-season-1\" -e 1 -p\n</code></pre>"},{"location":"yukimi/basic_usage/#downloading-an-anime","title":"Downloading an anime","text":"<pre><code>yukimi -t\n&gt; anime info hanime.tv \"https://hanime.tv/videos/hentai/overflow-season-1\" -e 1 -d\n</code></pre> <p>Custom download path can be specified using the command options.</p>"},{"location":"yukimi/basic_usage/#manga","title":"Manga","text":""},{"location":"yukimi/basic_usage/#searching-a-manga","title":"Searching a manga","text":"<pre><code>yukimi -t\n&gt; manga search &lt;module-name&gt; \"&lt;manga-name&gt;\"\n&gt; manga search mangadex.org \"mayo chiki\"\n</code></pre>"},{"location":"yukimi/basic_usage/#viewing-a-manga","title":"Viewing a manga","text":"<pre><code>yukimi -t\n&gt; manga info &lt;module-name&gt; \"&lt;manga-url&gt;\"\n&gt; manga info mangadex.org \"https://api.mangadex.org/manga/afa0770f-4648-4c12-94c6-78cb96da3cb3\"\n</code></pre> <p>This lists all the information and episodes of the anime.</p>"},{"location":"yukimi/basic_usage/#reading-a-manga","title":"Reading a manga","text":"<p>When viewing a manga, it is locally downloaded into a temporary folder before opened. So, it is better to use the <code>download</code> option instead of <code>read</code> option.</p> <pre><code>yukimi -t\n&gt; manga info mangadex.org \"https://api.mangadex.org/manga/afa0770f-4648-4c12-94c6-78cb96da3cb3\" -c 1 -r\n</code></pre>"},{"location":"yukimi/basic_usage/#downloading-a-manga","title":"Downloading a manga","text":"<pre><code>yukimi -t\n&gt; manga info mangadex.org \"https://api.mangadex.org/manga/afa0770f-4648-4c12-94c6-78cb96da3cb3\" -c 1 -d\n</code></pre>"},{"location":"yukimi/installation/","title":"Installing Yukimi","text":""},{"location":"yukimi/installation/#step-1-download-executable-from-releases","title":"Step 1: Download executable from releases","text":"<p>Download the pre-built binaries from releases.</p> <ul> <li>For Windows: <code>yukimi-windows.exe</code></li> <li>For Linux: <code>yukimi-linux</code></li> <li>For MacOS: <code>yukimi-macos</code></li> </ul>"},{"location":"yukimi/installation/#step-2-rename-it-optional","title":"Step 2: Rename it (Optional)","text":"<p>Once you have downloaded the correct executable, go ahead and move it to an appropriate folder and rename it to just <code>yukimi.exe</code> (in Windows) or <code>yukimi</code> (in Linux and MacOS). You can also add it to your <code>PATH</code> environment variable if you want to access it from anywhere.</p>"},{"location":"yukimi/installation/#step-3-thats-it","title":"Step 3: That's it","text":"<p>Now you can open the terminal in that folder and run <code>yukimi help</code> to get started.</p> <p>Check out basic usage guide if you need help with using it.</p>"}]}